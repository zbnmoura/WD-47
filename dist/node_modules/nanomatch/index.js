'use strict';var util = require('util');var toRegex = require('to-regex');var extend = require('extend-shallow');var compilers = require('./lib/compilers');var parsers = require('./lib/parsers');var cache = require('./lib/cache');var utils = require('./lib/utils');var max_LENGTH = 1024 * 64;function nanomatch(list,patterns,options){patterns = utils.arrayify(patterns);list = utils.arrayify(list);var len = patterns.length;if(list.length === 0 || len === 0){return []}if(len === 1){return nanomatch.match(list,patterns[0],options)}var negated = false;var omit = [];var keep = [];var idx = -1;while(++idx < len){var pattern = patterns[idx];if(typeof pattern === 'string' && pattern.charCodeAt(0) === 33){omit.push.apply(omit,nanomatch.match(list,pattern.slice(1),options));negated = true}else{keep.push.apply(keep,nanomatch.match(list,pattern,options))}}// minimatch.match parity if(negated && keep.length === 0){if(options && options.unixify === false){keep = list.slice()}else{var unixify = utils.unixify(options);for(var i = 0;i < list.length;i++){keep.push(unixify(list[i]))}}}var matches = utils.diff(keep,omit);if(!options || options.nodupes!== false){return utils.unique(matches)}return matches}nanomatch.match = function(list,pattern,options){if(Array.isArray(pattern)){throw new TypeError('expected pattern to be a string')}var unixify = utils.unixify(options);var isMatch = memoize('match',pattern,options,nanomatch.matcher);var matches = [];list = utils.arrayify(list);var len = list.length;var idx = -1;while(++idx < len){var ele = list[idx];if(ele === pattern || isMatch(ele)){matches.push(utils.value(ele,unixify,options))}}// if no options were passed,uniquify results and return if(typeof options === 'undefined'){return utils.unique(matches)}if(matches.length === 0){if(options.failglob === true){throw new Error('no matches found for "'+pattern+'"')}if(options.nonull === true || options.nullglob === true){return [options.unescape ? utils.unescape(pattern):pattern]}}// if `opts.ignore` was defined,diff ignored list if(options.ignore){matches = nanomatch.not(matches,options.ignore,options)}return options.nodupes!== false ? utils.unique(matches) :matches};nanomatch.isMatch = function(str,pattern,options){if(typeof str!== 'string'){throw new TypeError('expected a string: "'+util.inspect(str)+'"')}if(utils.isEmptyString(str) || utils.isEmptyString(pattern)){return false}var equals = utils.equalsPattern(options);if(equals(str)){return true}var isMatch = memoize('isMatch',pattern,options,nanomatch.matcher);return isMatch(str)};nanomatch.some = function(list,patterns,options){if(typeof list === 'string'){list = [list]}for(var i = 0;i < list.length;i++){if(nanomatch(list[i],patterns,options).length === 1){return true}}return false};nanomatch.every = function(list,patterns,options){if(typeof list === 'string'){list = [list]}for(var i = 0;i < list.length;i++){if(nanomatch(list[i],patterns,options).length!== 1){return false}}return true};nanomatch.any = function(str,patterns,options){if(typeof str!== 'string'){throw new TypeError('expected a string: "'+util.inspect(str)+'"')}if(utils.isEmptyString(str) || utils.isEmptyString(patterns)){return false}if(typeof patterns === 'string'){patterns = [patterns]}for(var i = 0;i < patterns.length;i++){if(nanomatch.isMatch(str,patterns[i],options)){return true}}return false};nanomatch.all = function(str,patterns,options){if(typeof str!== 'string'){throw new TypeError('expected a string: "'+util.inspect(str)+'"')}if(typeof patterns === 'string'){patterns = [patterns]}for(var i = 0;i < patterns.length;i++){if(!nanomatch.isMatch(str,patterns[i],options)){return false}}return true};nanomatch.not = function(list,patterns,options){,options);var ignore = opts.ignore;delete opts.ignore;list = utils.arrayify(list);var matches = utils.diff(list,nanomatch(list,patterns,opts));if(ignore){matches = utils.diff(matches,nanomatch(list,ignore))}return opts.nodupes!== false ? utils.unique(matches) :matches};nanomatch.contains = function(str,patterns,options){if(typeof str!== 'string'){throw new TypeError('expected a string: "'+util.inspect(str)+'"')}if(typeof patterns === 'string'){if(utils.isEmptyString(str) || utils.isEmptyString(patterns)){return false}var equals = utils.equalsPattern(patterns,options);if(equals(str)){return true}var contains = utils.containsPattern(patterns,options);if(contains(str)){return true}},options,{contains:true});return nanomatch.any(str,patterns,opts)};nanomatch.matchBase = function(pattern,options){if(pattern && pattern.indexOf('/')!== -1 ||!options) return false;return options.basename === true || options.matchBase === true};nanomatch.matchKeys = function(obj,patterns,options){if(!utils.isObject(obj)){throw new TypeError('expected the first argument to be an object')}var keys = nanomatch(Object.keys(obj),patterns,options);return utils.pick(obj,keys)};nanomatch.matcher = function matcher(pattern,options){if(utils.isEmptyString(pattern)){return function(){return false}}if(Array.isArray(pattern)){return compose(pattern,options,matcher)}// if pattern is a regex if(pattern instanceof RegExp){return test(pattern)}// if pattern is invalid if(!utils.isString(pattern)){throw new TypeError('expected pattern to be an array, string or regex')}// if pattern is a non-glob string if(!utils.hasSpecialChars(pattern)){if(options && options.nocase === true){pattern = pattern.toLowerCase()}return utils.matchPath(pattern,options)}// if pattern is a glob string var re = nanomatch.makeRe(pattern,options);// if `options.matchBase` or `options.basename` is defined if(nanomatch.matchBase(pattern,options)){return utils.matchBasename(re,options)}function test(regex){var equals = utils.equalsPattern(options);var unixify = utils.unixify(options);return function(str){if(equals(str)){return true}if(regex.test(unixify(str))){return true}return false}}var fn = test(re);Object.defineProperty(fn,'result',{configurable:true,enumerable:false,value:re.result});return fn};nanomatch.capture = function(pattern,str,options){var re = nanomatch.makeRe(pattern,extend({capture:true},options));var unixify = utils.unixify(options);function match(){return function(string){var match = re.exec(unixify(string));if(!match){return null}return match.slice(1)}}var capture = memoize('capture',pattern,options,match);return capture(str)};nanomatch.makeRe = function(pattern,options){if(pattern instanceof RegExp){return pattern}if(typeof pattern!== 'string'){throw new TypeError('expected pattern to be a string')}if(pattern.length>max_LENGTH){throw new Error('expected pattern to be less than '+max_LENGTH+' characters')}function makeRe(){var opts = utils.extend({wrap:false},options);var res = nanomatch.create(pattern,opts);var regex = toRegex(res.output,opts);Object.defineProperty(regex,'result',{configurable:true,enumerable:false,value:res});return regex}return memoize('makeRe',pattern,options,makeRe)};nanomatch.create = function(pattern,options){if(typeof pattern!== 'string'){throw new TypeError('expected a string')}function create(){return nanomatch.compile(nanomatch.parse(pattern,options),options)}return memoize('create',pattern,options,create)};nanomatch.parse = function(pattern,options){if(typeof pattern!== 'string'){throw new TypeError('expected a string')}function parse(){var snapdragon = utils.instantiate(null,options);parsers(snapdragon,options);var ast = snapdragon.parse(pattern,options);utils.define(ast,'snapdragon',snapdragon);ast.input = pattern;return ast}return memoize('parse',pattern,options,parse)};nanomatch.compile = function(ast,options){if(typeof ast === 'string'){ast = nanomatch.parse(ast,options)}function compile(){var snapdragon = utils.instantiate(ast,options);compilers(snapdragon,options);return snapdragon.compile(ast,options)}return memoize('compile',ast.input,options,compile)};nanomatch.clearCache = function(){};function compose(patterns,options,matcher){var matchers;return memoize('compose',String(patterns),options,function(){return function(file){// delay composition until it's invoked the first time,
      // after that it won't be called again if(!matchers){matchers = [];for(var i = 0;i < patterns.length;i++){matchers.push(matcher(patterns[i],options))}}var len = matchers.length;while(len--){if(matchers[len](file) === true){return true}}return false}})}function memoize(type,pattern,options,fn){var key = utils.createKey(type+'='+pattern,options);if(options && options.cache === false){return fn(pattern,options)}if(cache.has(type,key)){return cache.get(type,key)}var val = fn(pattern,options);cache.set(type,key,val);return val}nanomatch.compilers = compilers;nanomatch.parsers = parsers;nanomatch.cache = cache;module.exports = nanomatch;