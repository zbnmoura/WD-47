var arrayTag = '[object Array]',funcTag = '[object Function]';var reIsHostCtor = /^\[object .+?Constructor\]$/;function isObjectLike(value){return!!value && typeof value == 'object'}var objectProto = Object.prototype;var fnToString = Function.prototype.toString;var hasOwnProperty = objectProto.hasOwnProperty;var objToString = objectProto.toString;var reIsNative = RegExp('^'+fnToString.call(hasOwnProperty).replace(/|]/g,'\\___PRESERVED_TOKEN_4___') .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');var nativeIsArray = getNative(Array,'isArray');var max_SAFE_INTEGER = 9007199254740991;function getNative(object,key){var value = object == null ? undefined:object[key];return isNative(value) ? value:undefined}function isLength(value){return typeof value == 'number' && value>-1 && value % 1 == 0 && value <= max_SAFE_INTEGER}var isArray = nativeIsArray || function(value){return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag};function isFunction(value){// The use of `Object#toString` avoids issues with the `typeof` operator // in older versions of Chrome and Safari which return 'function' for regexes // and Safari 8 equivalents which return 'object' for typed array constructors. return isObject(value) && objToString.call(value) == funcTag}function isObject(value){// Avoid a V8 JIT bug in Chrome 19-20. // See https://code.google.com/p/v8/issues/detail?id=2291 for more details. var type = typeof value;return!!value &&(type == 'object' || type == 'function')}function isNative(value){if(value == null){return false}if(isFunction(value)){return reIsNative.test(fnToString.call(value))}return isObjectLike(value) && reIsHostCtor.test(value)}module.exports = isArray;