var fs = require("fs");var path = require("path");var Immutable = require("immutable");module.exports = function(plugins){return require("immutable") .fromJS(plugins) .filter(function(plugin){return plugin.get("name")!== "UI"}) .map(function(plugin){var moduleName = plugin.getIn(["opts","moduleName"]);if(!moduleName){return plugin}try{pkg = require("immutable").fromJS(require(path.join(moduleName,"package.json")))}catch(e){console.error(e);return plugin}plugin = plugin.set("pkg",pkg);return plugin.set("relpath",path.dirname(require.resolve(moduleName)))}) .map(function(plugin){if(!plugin.hasIn(["pkg","browser-sync:ui"])){return plugin}var markup = plugin.getIn(["pkg","browser-sync:ui","hooks","markup"]);if(markup){plugin = plugin.set("markup",fs.readFileSync(path.resolve(plugin.get("relpath"),markup),"utf8"))}return plugin}) .map(function(plugin){if(!plugin.hasIn(["pkg","browser-sync:ui"])){return plugin}return resolveIfPluginHas(["pkg","browser-sync:ui","hooks","templates"],"templates",plugin)}) .map(function(plugin){if(!plugin.hasIn(["pkg","browser-sync:ui"])){return plugin}return resolveIfPluginHas(["pkg","browser-sync:ui","hooks","client:js"],"client:js",plugin)})};function resolveIfPluginHas(optPath,propName,plugin){var opt = plugin.getIn(optPath);if(opt.size){return plugin.set(propName,resolvePluginFiles(opt,plugin.get("relpath")))}return plugin}function resolvePluginFiles(collection,relPath){return Immutable.fromJS(collection.reduce(function(all,item){var full = path.join(relPath,item);if(fs.existsSync(full)){all[full] = fs.readFileSync(full,"utf8")}return all}))}