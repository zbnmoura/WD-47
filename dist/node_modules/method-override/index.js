/*!
 * method-override
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */'use strict' var debug = require('debug')('method-override') var methods = require('methods') var parseurl = require('parseurl') var querystring = require('querystring') var vary = require('vary') module.exports = function methodOverride(getter,options){// get the getter fn var get = typeof getter === 'function' ? getter :createGetter(getter || 'X-HTTP-Method-Override') // get allowed request methods to examine var methods = opts.methods === undefined ? ['POST'] :opts.methods return function methodOverride(req,res,next){var method var val req.originalMethod = req.originalMethod || req.method // validate request is an allowed method if(methods && methods.indexOf(req.originalMethod) === -1){return next()}val = get(req,res) method = Array.isArray(val) ? val[0] :val // replace if(method!== undefined && supports(method)){req.method = method.toUpperCase() debug('override %s as %s',req.originalMethod,req.method)}next()}}function createGetter(str){if(str.substr(0,2).toUpperCase() === 'X-'){// header getter return createHeaderGetter(str)}return createQueryGetter(str)}function createQueryGetter(key){return function(req,res){var url = parseurl(req) var query = querystring.parse(url.query || '') return query[key]}}function createHeaderGetter(str){var name = str.toLowerCase() return function(req,res){// set appropriate Vary header vary(res,str) // get header var header = req.headers[name] if(!header){return undefined}// multiple headers get joined with comma by node.js core var index = header.indexOf(',') // return first value return index!== -1 ? header.substr(0,index).trim() :header.trim()}}function supports(method){return method && typeof method === 'string' && methods.indexOf(method.toLowerCase())!== -1}