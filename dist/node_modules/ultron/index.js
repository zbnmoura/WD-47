'use strict';var has = Object.prototype.hasOwnProperty;var id = 0;function Ultron(ee){if(!(this instanceof Ultron)) return new Ultron(ee);this.id = id++;this.ee = ee}Ultron.prototype.on = function on(event,fn,context){fn.__ultron = this.id;this.ee.on(event,fn,context);return this};Ultron.prototype.once = function once(event,fn,context){fn.__ultron = this.id;this.ee.once(event,fn,context);return this};Ultron.prototype.remove = function remove(){var args = arguments,ee = this.ee,event;// // When no event names are provided we assume that we need to clear all the // events that were assigned through us. // if(args.length === 1 && 'string' === typeof args[0]){args = args[0].split(/[,]+/)}else if(!args.length){if(ee.eventNames){args = ee.eventNames()}else if(ee._events){args = [];for(event in ee._events){if(has.call(ee._events,event)) args.push(event)}if(Object.getOwnPropertySymbols){args = args.concat(Object.getOwnPropertySymbols(ee._events))}}}for(var i = 0;i < args.length;i++){var listeners = ee.listeners(args[i]);for(var j = 0;j < listeners.length;j++){event = listeners[j];// // Once listeners have a `listener` property that stores the real listener // in the EventEmitter that ships with Node.js. // if(event.listener){if(event.listener.__ultron!== this.id) continue}else if(event.__ultron!== this.id){continue}ee.removeListener(args[i],event)}}return this};Ultron.prototype.destroy = function destroy(){if(!this.ee) return false;this.remove();this.ee = null;return true};// // Expose the module. // module.exports = Ultron;