var utils = require("./utils");function fileChanges(subject,options){var operators = [{option:"reloadThrottle",fnName:"throttle"},{option:"reloadDelay",fnName:"delay"}];var scheduler = options.getIn(["debug","scheduler"]);var initial = getAggregatedDebouncedStream(subject,options,scheduler);return applyOperators(operators,initial,options,scheduler) .map(function(items){var paths = items.map(function(x){return x.path});if(utils.willCauseReload(paths,options.get("injectFileTypes").toJS())){return{type:"reload",files:items}}return{type:"inject",files:items}})}module.exports.fileChanges = fileChanges;function applyReloadOperators(subject,options){var operators = [{option:"reloadDebounce",fnName:"debounce"},{option:"reloadThrottle",fnName:"throttle"},{option:"reloadDelay",fnName:"delay"}];return applyOperators(operators,subject,options,options.getIn(["debug","scheduler"]))}module.exports.applyReloadOperators = applyReloadOperators;function applyOperators(items,subject,options,scheduler){return items.reduce(function(subject,item){var value = options.get(item.option);if(value>0){return subject[item.fnName].call(subject,value,scheduler)}return subject},subject)}function getAggregatedDebouncedStream(subject,options,scheduler){return subject .filter(function(x){return options.get("watchEvents").indexOf(x.event)>-1}) .buffer(subject.debounce(options.get("reloadDebounce"),scheduler))}//# sourceMappingURL=file-event-handler.js.map