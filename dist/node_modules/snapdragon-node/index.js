'use strict';var isObject = require('isobject');var define = require('define-property');var utils = require('snapdragon-util');var ownNames;function Node(val,type,parent){if(typeof type!== 'string'){parent = type;type = null}define(this,'parent',parent);define(this,'isNode',true);define(this,'expect',null);if(typeof type!== 'string' && isObject(val)){lazyKeys();var keys = Object.keys(val);for(var i = 0;i < keys.length;i++){var key = keys[i];if(ownNames.indexOf(key) === -1){this[key] = val[key]}}}else{this.type = type;this.val = val}}Node.isNode = function(node){return utils.isNode(node)};Node.prototype.define = function(name,val){define(this,name,val);return this};Node.prototype.isEmpty = function(fn){return utils.isEmpty(this,fn)};Node.prototype.push = function(node){assert(Node.isNode(node),'expected node to be an instance of Node');define(node,'parent',this);this.nodes = this.nodes || [];return this.nodes.push(node)};Node.prototype.unshift = function(node){assert(Node.isNode(node),'expected node to be an instance of Node');define(node,'parent',this);this.nodes = this.nodes || [];return this.nodes.unshift(node)};Node.prototype.pop = function(){return this.nodes && this.nodes.pop()};Node.prototype.shift = function(){return this.nodes && this.nodes.shift()};Node.prototype.remove = function(node){assert(Node.isNode(node),'expected node to be an instance of Node');this.nodes = this.nodes || [];var idx = node.index;if(idx!== -1){node.index = -1;return this.nodes.splice(idx,1)}return null};Node.prototype.find = function(type){return utils.findNode(this.nodes,type)};Node.prototype.isType = function(type){return utils.isType(this,type)};Node.prototype.hasType = function(type){return utils.hasType(this,type)};Object.defineProperty(Node.prototype,'siblings',{set:function(){throw new Error('node.siblings is a getter and cannot be defined')},get:function(){return this.parent ? this.parent.nodes:null}});Object.defineProperty(Node.prototype,'index',{set:function(index){define(this,'idx',index)},get:function(){if(!Array.isArray(this.siblings)){return -1}var tok = this.idx!== -1 ? this.siblings[this.idx] :null;if(tok!== this){this.idx = this.siblings.indexOf(this)}return this.idx}});Object.defineProperty(Node.prototype,'prev',{set:function(){throw new Error('node.prev is a getter and cannot be defined')},get:function(){if(Array.isArray(this.siblings)){return this.siblings[this.index - 1] || this.parent.prev}return null}});Object.defineProperty(Node.prototype,'next',{set:function(){throw new Error('node.next is a getter and cannot be defined')},get:function(){if(Array.isArray(this.siblings)){return this.siblings[this.index+1] || this.parent.next}return null}});Object.defineProperty(Node.prototype,'first',{get:function(){return this.nodes ? this.nodes[0]:null}});Object.defineProperty(Node.prototype,'last',{get:function(){return this.nodes ? utils.last(this.nodes):null}});Object.defineProperty(Node.prototype,'scope',{get:function(){if(this.isScope!== true){return this.parent ? this.parent.scope:this}return this}});function lazyKeys(){if(!ownNames){ownNames = Object.getOwnPropertyNames(Node.prototype)}}function assert(val,message){if(!val) throw new Error(message)}exports = module.exports = Node;