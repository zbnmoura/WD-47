'use strict';var typeOf = require('kind-of');var utils = module.exports;utils.isNode = function(node){return typeOf(node) === 'object' && node.isNode === true};utils.noop = function(node){append(this,'',node)};utils.identity = function(node){append(this,node.val,node)};utils.append = function(val){return function(node){append(this,val,node)}};utils.toNoop = function(node,nodes){if(nodes){node.nodes = nodes}else{delete node.nodes;node.type = 'text';node.val = ''}};utils.visit = function(node,fn){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isFunction(fn),'expected a visitor function');fn(node);return node.nodes ? utils.mapVisit(node,fn):node};utils.mapVisit = function(node,fn){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isArray(node.nodes),'expected node.nodes to be an array');assert(isFunction(fn),'expected a visitor function');for(var i = 0;i < node.nodes.length;i++){utils.visit(node.nodes[i],fn)}return node};utils.addOpen = function(node,Node,val,filter){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isFunction(Node),'expected Node to be a constructor function');if(typeof val === 'function'){filter = val;val = ''}if(typeof filter === 'function' &&!filter(node)) return;var open = new Node({type:node.type+'.open',val:val});var unshift = node.unshift || node.unshiftNode;if(typeof unshift === 'function'){unshift.call(node,open)}else{utils.unshiftNode(node,open)}return open};utils.addClose = function(node,Node,val,filter){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isFunction(Node),'expected Node to be a constructor function');if(typeof val === 'function'){filter = val;val = ''}if(typeof filter === 'function' &&!filter(node)) return;var close = new Node({type:node.type+'.close',val:val});var push = node.push || node.pushNode;if(typeof push === 'function'){push.call(node,close)}else{utils.pushNode(node,close)}return close};utils.wrapNodes = function(node,Node,filter){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isFunction(Node),'expected Node to be a constructor function');utils.addOpen(node,Node,filter);utils.addClose(node,Node,filter);return node};utils.pushNode = function(parent,node){assert(utils.isNode(parent),'expected parent node to be an instance of Node');assert(utils.isNode(node),'expected node to be an instance of Node');node.define('parent',parent);parent.nodes = parent.nodes || [];parent.nodes.push(node);return node};utils.unshiftNode = function(parent,node){assert(utils.isNode(parent),'expected parent node to be an instance of Node');assert(utils.isNode(node),'expected node to be an instance of Node');node.define('parent',parent);parent.nodes = parent.nodes || [];parent.nodes.unshift(node)};utils.popNode = function(node){assert(utils.isNode(node),'expected node to be an instance of Node');if(typeof node.pop === 'function'){return node.pop()}return node.nodes && node.nodes.pop()};utils.shiftNode = function(node){assert(utils.isNode(node),'expected node to be an instance of Node');if(typeof node.shift === 'function'){return node.shift()}return node.nodes && node.nodes.shift()};utils.removeNode = function(parent,node){assert(utils.isNode(parent),'expected parent.node to be an instance of Node');assert(utils.isNode(node),'expected node to be an instance of Node');if(!parent.nodes){return null}if(typeof parent.remove === 'function'){return parent.remove(node)}var idx = parent.nodes.indexOf(node);if(idx!== -1){return parent.nodes.splice(idx,1)}};utils.isType = function(node,type){assert(utils.isNode(node),'expected node to be an instance of Node');switch(typeOf(type)){case 'array':var types = type.slice();for(var i = 0;i < types.length;i++){if(utils.isType(node,types[i])){return true}}return false;case 'string':return node.type === type;case 'regexp':return type.test(node.type);default:{throw new TypeError('expected "type" to be an array, string or regexp')}}};utils.hasType = function(node,type){assert(utils.isNode(node),'expected node to be an instance of Node');if(!Array.isArray(node.nodes)) return false;for(var i = 0;i < node.nodes.length;i++){if(utils.isType(node.nodes[i],type)){return true}}return false};utils.firstOfType = function(nodes,type){for(var i = 0;i < nodes.length;i++){var node = nodes[i];if(utils.isType(node,type)){return node}}};utils.findNode = function(nodes,type){if(!Array.isArray(nodes)){return null}if(typeof type === 'number'){return nodes[type]}return utils.firstOfType(nodes,type)};utils.isOpen = function(node){assert(utils.isNode(node),'expected node to be an instance of Node');return node.type.slice(-5) === '.open'};utils.isClose = function(node){assert(utils.isNode(node),'expected node to be an instance of Node');return node.type.slice(-6) === '.close'};utils.hasOpen = function(node){assert(utils.isNode(node),'expected node to be an instance of Node');var first = node.first || node.nodes ? node.nodes[0]:null;if(utils.isNode(first)){return first.type === node.type+'.open'}return false};utils.hasClose = function(node){assert(utils.isNode(node),'expected node to be an instance of Node');var last = node.last || node.nodes ? node.nodes[node.nodes.length - 1]:null;if(utils.isNode(last)){return last.type === node.type+'.close'}return false};utils.hasOpenAndClose = function(node){return utils.hasOpen(node) && utils.hasClose(node)};utils.addType = function(state,node){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isObject(state),'expected state to be an object');var type = node.parent ? node.parent.type:node.type.replace(/\.open$/,'');if(!state.hasOwnProperty('inside')){}if(!state.inside.hasOwnProperty(type)){state.inside[type] = []}var arr = state.inside[type];arr.push(node);return arr};utils.removeType = function(state,node){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isObject(state),'expected state to be an object');var type = node.parent ? node.parent.type:node.type.replace(/\.close$/,'');if(state.inside.hasOwnProperty(type)){return state.inside[type].pop()}};utils.isEmpty = function(node,fn){assert(utils.isNode(node),'expected node to be an instance of Node');if(!Array.isArray(node.nodes)){if(node.type!== 'text'){return true}if(typeof fn === 'function'){return fn(node,node.parent)}return!utils.trim(node.val)}for(var i = 0;i < node.nodes.length;i++){var child = node.nodes[i];if(utils.isOpen(child) || utils.isClose(child)){continue}if(!utils.isEmpty(child,fn)){return false}}return true};utils.isInsideType = function(state,type){assert(isObject(state),'expected state to be an object');assert(isString(type),'expected type to be a string');if(!state.hasOwnProperty('inside')){return false}if(!state.inside.hasOwnProperty(type)){return false}return state.inside[type].length>0};utils.isInside = function(state,node,type){assert(utils.isNode(node),'expected node to be an instance of Node');assert(isObject(state),'expected state to be an object');if(Array.isArray(type)){for(var i = 0;i < type.length;i++){if(utils.isInside(state,node,type[i])){return true}}return false}var parent = node.parent;if(typeof type === 'string'){return(parent && parent.type === type) || utils.isInsideType(state,type)}if(typeOf(type) === 'regexp'){if(parent && parent.type && type.test(parent.type)){return true}var keys = Object.keys(state.inside);var len = keys.length;var idx = -1;while(++idx < len){var key = keys[idx];var val = state.inside[key];if(Array.isArray(val) && val.length!== 0 && type.test(key)){return true}}}return false};utils.last = function(arr,n){return arr[arr.length -(n || 1)]};utils.arrayify = function(val){if(typeof val === 'string' && val!== ''){return [val]}if(!Array.isArray(val)){return []}return val};utils.stringify = function(val){return utils.arrayify(val).join(',')};utils.trim = function(str){return typeof str === 'string' ? str.trim():''};function isObject(val){return typeOf(val) === 'object'}function isString(val){return typeof val === 'string'}function isFunction(val){return typeof val === 'function'}function isArray(val){return Array.isArray(val)}function append(compiler,val,node){if(typeof compiler.append!== 'function'){return compiler.emit(val,node)}return compiler.append(val,node)}function assert(val,message){if(!val) throw new Error(message)}