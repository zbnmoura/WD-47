'use strict';var fs = require('fs');var path = require('path');var isGlob = require('is-glob');var resolveDir = require('resolve-dir');var detect = require('detect-file');var mm = require('micromatch');module.exports = function(patterns,options){;var cwd = path.resolve(resolveDir(options.cwd || ''));if(typeof patterns === 'string'){return lookup(cwd,[patterns],options)}if(!Array.isArray(patterns)){throw new TypeError('findup-sync expects a string or array as the first argument.')}return lookup(cwd,patterns,options)};function lookup(cwd,patterns,options){var len = patterns.length;var idx = -1;var res;while(++idx < len){if(isGlob(patterns[idx])){res = matchFile(cwd,patterns[idx],options)}else{res = findFile(cwd,patterns[idx],options)}if(res){return res}}var dir = path.dirname(cwd);if(dir === cwd){return null}return lookup(dir,patterns,options)}function matchFile(cwd,pattern,opts){var isMatch = mm.matcher(pattern,opts);var files = tryReaddirSync(cwd);var len = files.length;var idx = -1;while(++idx < len){var name = files[idx];var fp = path.join(cwd,name);if(isMatch(name) || isMatch(fp)){return fp}}return null}function findFile(cwd,filename,options){var fp = cwd ? path.resolve(cwd,filename):filename;return detect(fp,options)}function tryReaddirSync(fp){try{return fs.readdirSync(fp)}return []}