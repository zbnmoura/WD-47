/*!
 * use <https://github.com/jonschlinkert/use>
 *
 * Copyright (c) 2015, 2017, Jon Schlinkert.
 * Released under the MIT License.
 */'use strict';var utils = require('./utils');module.exports = function base(app,opts){if(!utils.isObject(app) && typeof app!== 'function'){throw new TypeError('use: expect `app` be an object or function')}if(!utils.isObject(opts)){}var prop = utils.isString(opts.prop) ? opts.prop :'fns';if(!Array.isArray(app[prop])){utils.define(app,prop,[])}utils.define(app,'use',use);utils.define(app,'run',function(val){if(!utils.isObject(val)) return;decorate(val);var self = this || app;var fns = self[prop];var len = fns.length;var idx = -1;while(++idx < len){val.use(fns[idx])}return val});function use(fn,options){if(typeof fn!== 'function'){throw new TypeError('.use expects `fn` be a function')}var self = this || app;if(typeof opts.fn === 'function'){opts.fn.call(self,self,options)}var plugin = fn.call(self,self);if(typeof plugin === 'function'){var fns = self[prop];fns.push(plugin)}return self}function decorate(val){if(!val.use ||!val.run){base(val)}}return app};