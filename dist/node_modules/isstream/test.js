"use strict";var tape=require("tape"),EE=require("events").EventEmitter,util=require("util"),isStream=require("./"),isReadable=require("./").isReadable,isWritable=require("./").isWritable,isDuplex=require("./").isDuplex,CoreStreams=require("stream"),ReadableStream10=require("./readable-stream-1.0/"),ReadableStream11=require("./readable-stream-1.1/");function test(e,a,t){tape("isStream("+a+")",function(r){r.plan(1),r.ok(e===isStream(t),a)})}function testReadable(e,a,t){tape("isReadable("+a+")",function(r){r.plan(1),r.ok(e===isReadable(t),a)})}function testWritable(e,a,t){tape("isWritable("+a+")",function(r){r.plan(1),r.ok(e===isWritable(t),a)})}function testDuplex(e,a,t){tape("isDuplex("+a+")",function(r){r.plan(1),r.ok(e===isDuplex(t),a)})}[void 0,null,"",!0,!1,0,1,1,"string",{},function(){}].forEach(function(e){test(!1,"non-stream / primitive: "+(JSON.stringify(e)||e&&e.toString()||e),e)}),test(!1,"fake stream obj",{pipe:function(){}}),function(){function e(){EE.call(this)}util.inherits(e,EE),e.prototype.pipe=function(){},e.Stream=e,test(!1,'fake stream "new Stream()"',new e)}(),test(!0,"CoreStreams.Stream",new CoreStreams.Stream),test(!0,"CoreStreams.Readable",new CoreStreams.Readable),test(!0,"CoreStreams.Writable",new CoreStreams.Writable),test(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),test(!0,"CoreStreams.Transform",new CoreStreams.Transform),test(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),test(!0,"ReadableStream10.Readable",new ReadableStream10.Readable),test(!0,"ReadableStream10.Writable",new ReadableStream10.Writable),test(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),test(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),test(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),test(!0,"ReadableStream11.Readable",new ReadableStream11.Readable),test(!0,"ReadableStream11.Writable",new ReadableStream11.Writable),test(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),test(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),test(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),testReadable(!1,"CoreStreams.Stream",new CoreStreams.Stream),testReadable(!0,"CoreStreams.Readable",new CoreStreams.Readable),testReadable(!1,"CoreStreams.Writable",new CoreStreams.Writable),testReadable(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),testReadable(!0,"CoreStreams.Transform",new CoreStreams.Transform),testReadable(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),testReadable(!0,"ReadableStream10.Readable",new ReadableStream10.Readable),testReadable(!1,"ReadableStream10.Writable",new ReadableStream10.Writable),testReadable(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),testReadable(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),testReadable(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),testReadable(!0,"ReadableStream11.Readable",new ReadableStream11.Readable),testReadable(!1,"ReadableStream11.Writable",new ReadableStream11.Writable),testReadable(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),testReadable(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),testReadable(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),testWritable(!1,"CoreStreams.Stream",new CoreStreams.Stream),testWritable(!1,"CoreStreams.Readable",new CoreStreams.Readable),testWritable(!0,"CoreStreams.Writable",new CoreStreams.Writable),testWritable(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),testWritable(!0,"CoreStreams.Transform",new CoreStreams.Transform),testWritable(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),testWritable(!1,"ReadableStream10.Readable",new ReadableStream10.Readable),testWritable(!0,"ReadableStream10.Writable",new ReadableStream10.Writable),testWritable(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),testWritable(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),testWritable(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),testWritable(!1,"ReadableStream11.Readable",new ReadableStream11.Readable),testWritable(!0,"ReadableStream11.Writable",new ReadableStream11.Writable),testWritable(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),testWritable(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),testWritable(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),testDuplex(!1,"CoreStreams.Stream",new CoreStreams.Stream),testDuplex(!1,"CoreStreams.Readable",new CoreStreams.Readable),testDuplex(!1,"CoreStreams.Writable",new CoreStreams.Writable),testDuplex(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),testDuplex(!0,"CoreStreams.Transform",new CoreStreams.Transform),testDuplex(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),testDuplex(!1,"ReadableStream10.Readable",new ReadableStream10.Readable),testDuplex(!1,"ReadableStream10.Writable",new ReadableStream10.Writable),testDuplex(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),testDuplex(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),testDuplex(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),testDuplex(!1,"ReadableStream11.Readable",new ReadableStream11.Readable),testDuplex(!1,"ReadableStream11.Writable",new ReadableStream11.Writable),testDuplex(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),testDuplex(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),testDuplex(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),[CoreStreams,ReadableStream10,ReadableStream11].forEach(function(e){["Stream","Readable","Writable","Duplex","Transform","PassThrough"].forEach(function(a){function t(){e[a].call(this)}e[a]&&(util.inherits(t,e[a]),test(!0,"Stream subclass: "+e.name+"."+a,new t))})});