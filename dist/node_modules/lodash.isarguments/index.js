var max_SAFE_INTEGER = 9007199254740991;var argsTag = '[object Arguments]',funcTag = '[object Function]',genTag = '[object GeneratorFunction]';var objectProto = Object.prototype;var hasOwnProperty = objectProto.hasOwnProperty;var objectToString = objectProto.toString;var propertyIsEnumerable = objectProto.propertyIsEnumerable;function isArguments(value){// Safari 8.1 makes `arguments.callee` enumerable in strict mode. return isArrayLikeObject(value) && hasOwnProperty.call(value,'callee') &&(!propertyIsEnumerable.call(value,'callee') || objectToString.call(value) == argsTag)}function isArrayLike(value){return value!= null && isLength(value.length) &&!isFunction(value)}function isArrayLikeObject(value){return isObjectLike(value) && isArrayLike(value)}function isFunction(value){// The use of `Object#toString` avoids issues with the `typeof` operator // in Safari 8-9 which returns 'object' for typed array and other constructors. var tag = isObject(value) ? objectToString.call(value):'';return tag == funcTag || tag == genTag}function isLength(value){return typeof value == 'number' && value>-1 && value % 1 == 0 && value <= max_SAFE_INTEGER}function isObject(value){var type = typeof value;return!!value &&(type == 'object' || type == 'function')}function isObjectLike(value){return!!value && typeof value == 'object'}module.exports = isArguments;